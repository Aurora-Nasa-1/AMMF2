name: Build module release

on:
  push:
    tags:
      - "*" # Run on any tag push
  workflow_dispatch: # Allow manual trigger

jobs:
  release: # Renamed job for clarity
    runs-on: ubuntu-latest
    permissions: # Needed for softprops/action-gh-release to create releases
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # To get all tags

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install RMM (pyrmm)
        run: |
          source "$HOME/.cargo/env"
          uv tool install pyrmm
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r26d

      - name: Build with RMM
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: rmm build # This executes "bash ./custom_rmm_build.sh"

      - name: Prepare Release Info
        id: prepare_release
        run: |
          # Source build_config.sh to get Github_update_repo
          # Determine path to module_settings/build_config.sh (might be in module/ if custom script moved it)
          BUILD_CONFIG_PATH="module_settings/build_config.sh"
          if [ -f "module/module_settings/build_config.sh" ]; then
            BUILD_CONFIG_PATH="module/module_settings/build_config.sh"
          elif [ ! -f "$BUILD_CONFIG_PATH" ]; then
            echo "::error::build_config.sh not found!"
            exit 1
          fi
          source $BUILD_CONFIG_PATH # This makes Github_update_repo available

          # Determine path to module.prop (generated by custom_rmm_build.sh)
          MODULE_PROP_PATH="module.prop"
          if [ -f "module/module.prop" ]; then
            MODULE_PROP_PATH="module/module.prop"
          elif [ ! -f "$MODULE_PROP_PATH" ]; then
            echo "::error::module.prop not found after build!"
            exit 1
          fi

          VERSION=$(grep '^version=' $MODULE_PROP_PATH | cut -d= -f2)
          VERSION_CODE=$(grep '^versionCode=' $MODULE_PROP_PATH | cut -d= -f2)
          ACTION_ID=$(grep '^id=' $MODULE_PROP_PATH | cut -d= -f2)
          LATEST_TAG=${{ github.ref_name }} # Get tag from the event ref

          echo "Version: $VERSION"
          echo "VersionCode: $VERSION_CODE"
          echo "Action ID: $ACTION_ID"
          echo "Latest Tag: $LATEST_TAG"
          echo "Github Update Repo: $Github_update_repo"

          # Define ZIP_NAME based on RMM's typical output (project_id-version.zip)
          ZIP_NAME="${ACTION_ID}-${VERSION}.zip"
          echo "Expected ZIP Name: $ZIP_NAME"

          # Check if the zip file exists
          if [ ! -f "$ZIP_NAME" ]; then
            echo "::warning::Expected zip file '$ZIP_NAME' not found. Listing zips:"
            ls -la *.zip || echo "No zip files found with ls."
            # Fallback: Try to find any .zip file if the specific one is not found
            # This is a common pattern if the project ID has characters RMM sanitizes differently
            # or if versioning in module.prop has unexpected characters for a filename.
            FOUND_ZIP=$(find . -maxdepth 1 -name "*.zip" -print -quit)
            if [ -n "$FOUND_ZIP" ]; then
                echo "::warning::Using found zip file: $FOUND_ZIP as ZIP_NAME"
                ZIP_NAME=$FOUND_ZIP
            else
                echo "::error::No zip file found at all!"
                exit 1
            fi
          fi

          echo "version_val=$VERSION" >> $GITHUB_OUTPUT
          echo "version_code_val=$VERSION_CODE" >> $GITHUB_OUTPUT
          echo "zip_name_val=$ZIP_NAME" >> $GITHUB_OUTPUT
          echo "latest_tag_val=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "github_update_repo_val=$Github_update_repo" >> $GITHUB_OUTPUT

      - name: Create update.json
        run: |
          cat > update.json << EOF
          {
            "version": "${{ steps.prepare_release.outputs.version_val }}",
            "versionCode": ${{ steps.prepare_release.outputs.version_code_val }},
            "zipUrl": "https://github.com/${{ steps.prepare_release.outputs.github_update_repo_val }}/releases/download/${{ steps.prepare_release.outputs.latest_tag_val }}/${{ steps.prepare_release.outputs.zip_name_val }}",
            "changelog": "https://github.com/${{ steps.prepare_release.outputs.github_update_repo_val }}/releases/tag/${{ steps.prepare_release.outputs.latest_tag_val }}"
          }
          EOF
          echo "Generated update.json:"
          cat update.json

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.prepare_release.outputs.zip_name_val }}
            update.json
          # The release name and body will use the tag name and commit message by default.
          # Users might want to customize this further.

      - name: Update repository update.json
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add update.json
          git commit -m "chore: update update.json for ${{ steps.prepare_release.outputs.latest_tag_val }}" || echo "No changes to commit to update.json"
          git push
